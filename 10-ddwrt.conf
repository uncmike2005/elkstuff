input{
file {
    path => "/var/log/ddwrt.log"
  }
}

filter {
    #drop DNS lookups from the logstash server
    if ([message] =~ /<REDACTED>/) {
        drop{}
    }
    grok { match => [ "message", "SEQ=%{NUMBER:sequenceNum:int}" ]}
    grok { match => [ "message", "ACK=%{NUMBER:ackNum:int}" ]}
    grok { match => [ "message", "WINDOW=%{NUMBER:windowSize:int}" ]}
    grok { match => [ "message", "RES=%{WORD:reservedBits}" ]}
    grok { match => [ "message", "URGP=%{NUMBER:urgPointer:int}" ]}
    grok { match => [ "message", " ACK " ]
           add_field => { "ackFlag" => "true" }
    }
    grok { match => [ "message", " FIN " ]
           add_field => { "finFlag" => "true" }
    }
    grok { match => [ "message", " SYN " ]
           add_field => { "synFlag" => "true" }
    }
    grok { match => [ "message", " RST " ]
           add_field => { "rstFlag" => "true" }
    }
    grok { match => [ "message", " PSH " ]
           add_field => { "rstFlag" => "true" }
    }
    grok { match => [ "message", " URG " ]
           add_field => { "urgFlag" => "true" }
    }
    grok { match => [ "message", "%{SPACE}OPT%{SPACE}%{NOTSPACE:opt}" ]}
    grok { match => [ "message", "DST=%{IPV4:destIP}" ]
           add_field => { "destHost" => "%{destIP}" }
    }
    grok { match => [ "message", "IN=%{WORD:in}" ]}
    grok { match => [ "message", "SRC=%{IPV4:sourceIP}" ]
           add_field => { "sourceHost" => "%{sourceIP}" }
    }
    grok { match => [ "message", "%{SYSLOGTIMESTAMP:logdate}" ]}
    grok { match => [ "message", "OUT=%{WORD:out}" ]}
    grok { match => [ "message", "MAC=%{NOTSPACE:macAddress}" ]}
    grok { match => [ "message", "SPT=%{NUMBER:sourcePort:int}" ]}
    grok { match => [ "message", "DPT=%{NUMBER:destPort:int}" ]}
    grok { match => [ "message", "TTL=%{NUMBER:TTL:int}" ]}
    grok { match => [ "message", "PROTO=%{WORD:protocol}" ]}
    grok { match => [ "message", "LEN=%{NUMBER:len:int}" ]}
    grok { match => [ "message", "%{SYSLOGTIMESTAMP}%{SPACE}%{HOST}%{SPACE}kernel: %{WORD:action}" ]}
    grok { match => [ "message", "%{SYSLOGTIMESTAMP}%{SPACE}%{HOST}%{SPACE}pptpd\[%{NUMBER:pptpPID:int}\]: CTRL: Client %{IPV4:pptpClientIP} control connection %{WORD:pptpState}" ]
           add_field => { "pptpClientHost" => "%{pptpClientIP}" }
    }
    #grok { match => [ "message", "%{SYSLOGTIMESTAMP}%{SPACE}%{HOST}%{SPACE}pptpd\[%{NUMBER:pptpPID:int}\]" ]}
    geoip {
      source => "pptpClientIP"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    geoip {
      source => "sourceIP"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    geoip {
      source => "destIP"
      target => "geoip"
      database => "/etc/logstash/GeoLiteCity.dat"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
    }    
    
    #if [sourceHost] !~ /192.168/ {
        dns {
          reverse => [ "sourceHost" ]
          action => [ "replace" ]
          #nameserver => "8.8.8.8"
        }
    #}
    #if [destHost] !~ /192.168/ {
        dns {
          reverse => [ "destHost" ]
          action => [ "replace" ]
          #nameserver => "8.8.8.8"
        }
    #}
    #if [pptpClientHost] !~ /192.168/ {
        dns {
          reverse => [ "pptpClientHost" ]
          action => [ "replace" ]
          #nameserver => "8.8.8.8"
        }
    #}
    date {
        match => ["logdate", "MMM dd HH:mm:ss"]
        timezone => "Europe/London"
    }



}

output {
  elasticsearch {
    host => "localhost"
    port => 9300
  }
}

